using System;
namespace CSharp设计模式
{
	public class Memento
	{
        //备忘录模式（行为型）
        //定义：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以把该对象恢复到原先的状态。
        //角色：
        //1、发起人（Originator）：负责创建备忘录对象并记录当前状态。
        //2、备忘录（Memento）：用于存储发起人的内部状态。
        //3、管理器（Caretaker）：负责保存备忘录对象，并在需要时将其返回给发起人。
        //优点：
        //1、可以方便地恢复对象的状态，因为备忘录对象保存了发起人的内部状态。
        //2、发起人对象不需要暴露其内部状态，从而保护其封装性。
        //3、备忘录模式可以与命令模式一起使用，使得可以轻松地回滚操作。
        //缺点：
        //1、如果备忘录对象保存了大量的状态数据，可能会占用过多的内存。
        //2、如果备忘录对象的状态数据是私密数据，那么在将备忘录对象传递给管理器对象时，需要确保数据的安全性。
        //使用场景：
        //1、当需要保存一个对象在某一时刻的状态，并且需要在将来的某个时候将其恢复到该状态时。
        //2、当需要实现撤销/重做操作时，备忘录模式可以与命令模式一起使用。
        //3、当发起人对象的状态需要保护封装性时，备忘录模式可以帮助实现这一点。
    }
}

